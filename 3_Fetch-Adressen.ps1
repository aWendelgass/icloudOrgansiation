# ===================================================================# Skript zur Umwandlung von Koordinaten in Adressen## ** Damit das Skript ausgeführt werden kann müssen die Policies **# ** Für die Dauer des Prozesses geändert werden, dazu habe ich  **# ** Die Batchdatei 3_doFetch-Adressen.bat erstellt, die kümmert **# ** sich darum und ruft das Script auf                          **## Das Skript gehört zu einem Set of 5: Wenn alles ordnungsgemäß abläuft # könnt ihr damit eine beliebiege Verzeichnissttruktur  von Bild und # Video Medien organsieren. Das heisst: Umbenennen, verschieben, # doppelte entfernen. ## 3_Fetch-Adressen.ps1## Es erfoderte das ihr euch kostenlos  hier https://myprojects.geoapify.com# registrieren lasst. Dort erstellt ihr dann ein neues Projekt und erstellt euch# dann hier einen API Key, den müsst ihr dann unten eintragen# # z.B: https://myprojects.geoapify.com/api/xxx ausgeblendet xxx/keys## # Am Ende erhaltetihr die Datei 3_Koordinaten_mit_Adressen.csv, die sieht etwas so aus## LATLONG	Adresse# 25,34886#51,52943	InterContinental Hotel, Al Ghais Street, Doha, Qatar# 48,13052#10,99327	Ritterschwemme zu Kaltenberg, Schloßstraße 11, 82269 Kaltenberg, Germany# 48,13052#10,99329	Ritterschwemme zu Kaltenberg, Schloßstraße 11, 82269 Kaltenberg, Germany# 25,34798#51,53084	InterContinental Hotel, Al Ghais Street, Doha, Qatar# 25,34862#51,52973	InterContinental Hotel, Al Ghais Street, Doha, Qatar# 48,13041#10,99329	Ritterschwemme zu Kaltenberg, Schloßstraße 11, 82269 Kaltenberg, Germany# 25,34788#51,53112	InterContinental Hotel, Al Ghais Street, Doha, Qatar# 25,34860#51,52983	InterContinental Hotel, Al Ghais Street, Doha, Qatar# 48,13033#10,99289	Ritterschwemme zu Kaltenberg, Schloßstraße 11, 82269 Kaltenberg, Germany### Im nächsten Skript werden diese Angaben wieder den Orginal Koordinaten zugeorndet.# ===================================================================#region Konfiguration: Bitte passen Sie diese 3 Zeilen an# -----------------------------------------------------------# 1. Fügen Sie hier Ihren EIGENEN API-Schlüssel von Geoapify ein, dieser ist nur ein Platzhalter$ApiKey = "1234567890abcdefghijklmnopqrstuv"# 2. Der Pfad zu Ihrer kleinen CSV-Datei mit den ~10.000 einzigartigen Orten$InputCsv_Unique = Join-Path -Path $PSScriptRoot -ChildPath "2_Koordinaten-Export.csv"# 3. Der Pfad, wo die neue CSV-Datei mit den Adressen gespeichert werden soll$OutputCsv_Enriched = Join-Path -Path $PSScriptRoot -ChildPath "3_Koordinaten_mit_Adressen.csv"#endregion# --- SCHRITT 1: Daten einlesen ---Write-Host "Lese CSV-Datei mit einzigartigen Orten ein..."try {    $data_unique = Import-Csv -Path $InputCsv_Unique -Delimiter ';'} catch {    Write-Host "FEHLER: Die Eingabedatei '$InputCsv_Unique' konnte nicht gefunden oder gelesen werden." -ForegroundColor Red    pause    return}Write-Host "$($data_unique.Count) einzigartige Orte gefunden."# --- SCHRITT 2: Liste für die Ergebnisse vorbereiten ---$ergebnisliste = [System.Collections.Generic.List[object]]::new()# --- SCHRITT 3: Die einzigartigen Orte bei der API anfragen ---$zaehler = 0$gesamt = $data_unique.CountWrite-Host "Beginne mit der API-Abfrage für $gesamt einzigartige Orte..."foreach ($unique_location in $data_unique) {    $zaehler++    Write-Progress -Activity "Frage Adressen von API ab" -Status "Ort $zaehler von $gesamt" -PercentComplete (($zaehler / $gesamt) * 100)    $latlong = $unique_location.LATLONG        # LATLONG-Schlüssel wieder in separate Koordinaten aufteilen    # Wichtig: Wir ersetzen das Komma aus Excel durch einen Punkt für die API    $latitude, $longitude = $latlong.Replace(',', '.').Split('#')        # API-URL zusammenbauen. lang=en fragt englische/lateinische Ergebnisse an.    $apiUrl = "https://api.geoapify.com/v1/geocode/reverse?lat=$latitude&lon=$longitude&lang=en&apiKey=$ApiKey"    $foundAddress = "" # Standardwert    try {        $response = Invoke-RestMethod -Uri $apiUrl -Method Get        $formattedAddress = $response.features[0].properties.formatted                if ($formattedAddress) {            $foundAddress = $formattedAddress        } else {            $foundAddress = "Keine Adresse gefunden"        }    } catch {        # KORRIGIERTE ZEILE: $latlong in geschweifte Klammern gesetzt        Write-Warning "Fehler bei der API-Abfrage für ${latlong}: $($_.Exception.Message)"        $foundAddress = "API Fehler"    }        # Ein neues Objekt mit dem Schlüssel und der gefundenen Adresse erstellen    $resultObject = [PSCustomObject]@{        LATLONG = $latlong        Adresse = $foundAddress    }    $ergebnisliste.Add($resultObject)        # Eine kleine Pause, um die API nicht zu überlasten (ca. 5 Anfragen pro Sekunde)    Start-Sleep -Milliseconds 200}# --- SCHRITT 4: Angereicherte Liste in neue CSV-Datei exportieren ---Write-Host "Speichere angereicherte Liste nach '$OutputCsv_Enriched'..."$ergebnisliste | Export-Csv -Path $OutputCsv_Enriched -Delimiter ';' -NoTypeInformation -Encoding UTF8Write-Host "Fertig! Schritt 1 ist abgeschlossen." -ForegroundColor Green