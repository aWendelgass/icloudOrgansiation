# ===================================================================# Skript zur Umwandlung von Koordinaten in Adressen## ** Damit das Skript ausgeführt werden kann müssen die Policies **# ** Für die Dauer des Prozesses geändert werden, dazu habe ich  **# ** Die Batchdatei 4_doMerge-Data.bat etstellt, die kümmert     **# ** sich darum und ruft das Script auf                          **## Das Skript gehört zu einem Set of 5: Wenn alles ordnungsgemäß abläuft # könnt ihr damit eine beliebiege Verzeichnissttruktur  von Bild und # Video Medien organsieren. Das heisst: Umbenennen, verschieben, # doppelte entfernen. ## 4_Merge-Data.ps1## Dieses Skript kombiniert nun die erste Datei 1_Media-Export.csv mit den gewonnen Adressen# und erstellt 4_Media-Export_extended.csv mit folgenden Spalten##  + Pfad:#  + Dateiname#  + Dateiname_ohne_Extension#  + Extension#  + Erstelldatum_Zeit_des_Mediums#  + latitude#  + longitude#  + Adresse (inklusve Ort, Land PLZ, Strasse, Hausnummer, Bezirk)### ===================================================================#region Konfiguration$InputCsv_Full = Join-Path -Path $PSScriptRoot -ChildPath "1_Media-Export.csv"$InputCsv_Lookup = Join-Path -Path $PSScriptRoot -ChildPath "3_Koordinaten_mit_Adressen.csv"$OutputCsv_Final = Join-Path -Path $PSScriptRoot -ChildPath "4_Media-Export_extended.csv"#endregionWrite-Host "Lese Adress-Datei ein..."$lookupData = Import-Csv -Path $InputCsv_Lookup -Delimiter ';'$addressLookup = @{}foreach ($item in $lookupData) { $addressLookup[$item.LATLONG] = $item.Adresse }Write-Host "Lese große Datendatei ein..."$fullData = Import-Csv -Path $InputCsv_Full -Delimiter ';'Write-Host "Füge Adressen zu den $($fullData.Count) Datensätzen hinzu..."foreach ($row in $fullData) {    $foundAddress = "Keine GPS-Daten"    if ($row.latitude -and $row.longitude -and $row.latitude -ne "") {        # FINALE LOGIK: Normalisiert den Input (ersetzt Komma durch Punkt) und arbeitet dann nur noch mit Text.        $latNormalized = $row.latitude.Replace(',', '.')        $lonNormalized = $row.longitude.Replace(',', '.')        if ($latNormalized.Contains('.')) {            $latParts = $latNormalized.Split('.')            $latRounded = $latParts[0] + "," + $latParts[1].PadRight(5, '0').Substring(0, 5)            $lonParts = $lonNormalized.Split('.')            $lonRounded = $lonParts[0] + "," + $lonParts[1].PadRight(5, '0').Substring(0, 5)            $current_latlong = "$latRounded#$lonRounded"            if ($addressLookup.ContainsKey($current_latlong)) {                $foundAddress = $addressLookup[$current_latlong]            } else { $foundAddress = "Adresse nicht gefunden" }        }    }    Add-Member -InputObject $row -MemberType NoteProperty -Name "Adresse" -Value $foundAddress}Write-Host "Speichere die finale, vollständige CSV-Datei..."$fullData | Export-Csv -Path $OutputCsv_Final -Delimiter ';' -NoTypeInformation -Encoding UTF8Write-Host "FERTIG!" -ForegroundColor Green